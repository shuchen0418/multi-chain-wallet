{"ast":null,"code":"import axios from 'axios';\n// 创建axios实例\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000\n});\n\n// 请求拦截器\napiClient.interceptors.request.use(config => {\n  // 从本地存储获取token\n  const token = localStorage.getItem('auth_token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    // 处理错误响应\n    if (error.response.status === 401) {\n      // 未授权，清除token并重定向到登录页\n      localStorage.removeItem('auth_token');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API请求方法\nexport const api = {\n  get: (url, config) => {\n    return apiClient.get(url, config).then(response => response.data);\n  },\n  post: (url, data, config) => {\n    return apiClient.post(url, data, config).then(response => response.data);\n  },\n  put: (url, data, config) => {\n    return apiClient.put(url, data, config).then(response => response.data);\n  },\n  delete: (url, config) => {\n    return apiClient.delete(url, config).then(response => response.data);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","api","get","url","then","data","post","put","delete"],"sources":["D:/Desktop/code/multi-chain-wallet/frontend/src/api/apiClient.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { ApiResponse } from '../types';\r\n\r\n// 创建axios实例\r\nconst apiClient: AxiosInstance = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 10000,\r\n});\r\n\r\n// 请求拦截器\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // 从本地存储获取token\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token && config.headers) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response) {\r\n      // 处理错误响应\r\n      if (error.response.status === 401) {\r\n        // 未授权，清除token并重定向到登录页\r\n        localStorage.removeItem('auth_token');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API请求方法\r\nexport const api = {\r\n  get: <T>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    return apiClient.get(url, config).then((response: AxiosResponse<ApiResponse<T>>) => response.data);\r\n  },\r\n  post: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    return apiClient.post(url, data, config).then((response: AxiosResponse<ApiResponse<T>>) => response.data);\r\n  },\r\n  put: <T>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    return apiClient.put(url, data, config).then((response: AxiosResponse<ApiResponse<T>>) => response.data);\r\n  },\r\n  delete: <T>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> => {\r\n    return apiClient.delete(url, config).then((response: AxiosResponse<ApiResponse<T>>) => response.data);\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAA4D,OAAO;AAG/E;AACA,MAAMC,SAAwB,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5CC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAP,SAAS,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,IAAID,MAAM,CAACL,OAAO,EAAE;IAC3BK,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,SAAS,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjC;MACAP,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;MACrCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,GAAG,GAAG;EACjBC,GAAG,EAAEA,CAAIC,GAAW,EAAEhB,MAA2B,KAA8B;IAC7E,OAAOX,SAAS,CAAC0B,GAAG,CAACC,GAAG,EAAEhB,MAAM,CAAC,CAACiB,IAAI,CAAET,QAAuC,IAAKA,QAAQ,CAACU,IAAI,CAAC;EACpG,CAAC;EACDC,IAAI,EAAEA,CAAIH,GAAW,EAAEE,IAAU,EAAElB,MAA2B,KAA8B;IAC1F,OAAOX,SAAS,CAAC8B,IAAI,CAACH,GAAG,EAAEE,IAAI,EAAElB,MAAM,CAAC,CAACiB,IAAI,CAAET,QAAuC,IAAKA,QAAQ,CAACU,IAAI,CAAC;EAC3G,CAAC;EACDE,GAAG,EAAEA,CAAIJ,GAAW,EAAEE,IAAU,EAAElB,MAA2B,KAA8B;IACzF,OAAOX,SAAS,CAAC+B,GAAG,CAACJ,GAAG,EAAEE,IAAI,EAAElB,MAAM,CAAC,CAACiB,IAAI,CAAET,QAAuC,IAAKA,QAAQ,CAACU,IAAI,CAAC;EAC1G,CAAC;EACDG,MAAM,EAAEA,CAAIL,GAAW,EAAEhB,MAA2B,KAA8B;IAChF,OAAOX,SAAS,CAACgC,MAAM,CAACL,GAAG,EAAEhB,MAAM,CAAC,CAACiB,IAAI,CAAET,QAAuC,IAAKA,QAAQ,CAACU,IAAI,CAAC;EACvG;AACF,CAAC;AAED,eAAeJ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}