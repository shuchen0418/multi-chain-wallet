{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop\\\\code\\\\multi-chain-wallet\\\\frontend\\\\src\\\\context\\\\WalletContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport walletApi from '../api/walletApi';\n\n// 定义上下文类型\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 创建上下文\nconst WalletContext = /*#__PURE__*/createContext(undefined);\n\n// 定义Provider组件Props\n\n// 创建Provider组件\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [wallets, setWallets] = useState([]);\n  const [currentWallet, setCurrentWallet] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 获取钱包列表\n  const refreshWallets = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await walletApi.getWallets();\n      if (response.code === 0) {\n        setWallets(response.data);\n        // 如果有钱包并且没有当前选中的钱包，则选择第一个\n        if (response.data.length > 0 && !currentWallet) {\n          setCurrentWallet(response.data[0]);\n        }\n      } else {\n        setError(response.message);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch wallets');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 创建钱包\n  const createWallet = async chainType => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await walletApi.createWallet({\n        chainType\n      });\n      if (response.code === 0) {\n        await refreshWallets(); // 刷新钱包列表\n        return response.data;\n      } else {\n        setError(response.message);\n        throw new Error(response.message);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create wallet';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 从助记词导入钱包\n  const importFromMnemonic = async (mnemonic, chainType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await walletApi.importFromMnemonic({\n        mnemonic,\n        chainType\n      });\n      if (response.code === 0) {\n        await refreshWallets(); // 刷新钱包列表\n        return response.data;\n      } else {\n        setError(response.message);\n        throw new Error(response.message);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to import wallet';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 从私钥导入钱包\n  const importFromPrivateKey = async (privateKey, chainType) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await walletApi.importFromPrivateKey({\n        privateKey,\n        chainType\n      });\n      if (response.code === 0) {\n        await refreshWallets(); // 刷新钱包列表\n        return response.data;\n      } else {\n        setError(response.message);\n        throw new Error(response.message);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to import wallet';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 初始化时获取钱包列表\n  useEffect(() => {\n    refreshWallets();\n  }, []);\n\n  // 上下文值\n  const value = {\n    wallets,\n    currentWallet,\n    loading,\n    error,\n    setCurrentWallet,\n    refreshWallets,\n    createWallet,\n    importFromMnemonic,\n    importFromPrivateKey\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n};\n\n// 创建钱包上下文Hook\n_s(WalletProvider, \"PbACxGLjQf8rW8gj0TVlxpIYyW0=\");\n_c = WalletProvider;\nexport const useWallet = () => {\n  _s2();\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n_s2(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default WalletContext;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","walletApi","jsxDEV","_jsxDEV","WalletContext","undefined","WalletProvider","children","_s","wallets","setWallets","currentWallet","setCurrentWallet","loading","setLoading","error","setError","refreshWallets","response","getWallets","code","data","length","message","err","Error","createWallet","chainType","errorMessage","importFromMnemonic","mnemonic","importFromPrivateKey","privateKey","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWallet","_s2","context","$RefreshReg$"],"sources":["D:/Desktop/code/multi-chain-wallet/frontend/src/context/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';\r\nimport { Wallet, ChainType } from '../types';\r\nimport walletApi from '../api/walletApi';\r\n\r\n// 定义上下文类型\r\ninterface WalletContextType {\r\n  wallets: Wallet[];\r\n  currentWallet: Wallet | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  setCurrentWallet: (wallet: Wallet) => void;\r\n  refreshWallets: () => Promise<void>;\r\n  createWallet: (chainType: ChainType) => Promise<string>;\r\n  importFromMnemonic: (mnemonic: string, chainType: ChainType) => Promise<string>;\r\n  importFromPrivateKey: (privateKey: string, chainType: ChainType) => Promise<string>;\r\n}\r\n\r\n// 创建上下文\r\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\r\n\r\n// 定义Provider组件Props\r\ninterface WalletProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// 创建Provider组件\r\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\r\n  const [wallets, setWallets] = useState<Wallet[]>([]);\r\n  const [currentWallet, setCurrentWallet] = useState<Wallet | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 获取钱包列表\r\n  const refreshWallets = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await walletApi.getWallets();\r\n      if (response.code === 0) {\r\n        setWallets(response.data);\r\n        // 如果有钱包并且没有当前选中的钱包，则选择第一个\r\n        if (response.data.length > 0 && !currentWallet) {\r\n          setCurrentWallet(response.data[0]);\r\n        }\r\n      } else {\r\n        setError(response.message);\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch wallets');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 创建钱包\r\n  const createWallet = async (chainType: ChainType): Promise<string> => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await walletApi.createWallet({ chainType });\r\n      if (response.code === 0) {\r\n        await refreshWallets(); // 刷新钱包列表\r\n        return response.data;\r\n      } else {\r\n        setError(response.message);\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create wallet';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 从助记词导入钱包\r\n  const importFromMnemonic = async (mnemonic: string, chainType: ChainType): Promise<string> => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await walletApi.importFromMnemonic({ mnemonic, chainType });\r\n      if (response.code === 0) {\r\n        await refreshWallets(); // 刷新钱包列表\r\n        return response.data;\r\n      } else {\r\n        setError(response.message);\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to import wallet';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 从私钥导入钱包\r\n  const importFromPrivateKey = async (privateKey: string, chainType: ChainType): Promise<string> => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await walletApi.importFromPrivateKey({ privateKey, chainType });\r\n      if (response.code === 0) {\r\n        await refreshWallets(); // 刷新钱包列表\r\n        return response.data;\r\n      } else {\r\n        setError(response.message);\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to import wallet';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 初始化时获取钱包列表\r\n  useEffect(() => {\r\n    refreshWallets();\r\n  }, []);\r\n\r\n  // 上下文值\r\n  const value = {\r\n    wallets,\r\n    currentWallet,\r\n    loading,\r\n    error,\r\n    setCurrentWallet,\r\n    refreshWallets,\r\n    createWallet,\r\n    importFromMnemonic,\r\n    importFromPrivateKey,\r\n  };\r\n\r\n  return <WalletContext.Provider value={value}>{children}</WalletContext.Provider>;\r\n};\r\n\r\n// 创建钱包上下文Hook\r\nexport const useWallet = (): WalletContextType => {\r\n  const context = useContext(WalletContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWallet must be used within a WalletProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default WalletContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}