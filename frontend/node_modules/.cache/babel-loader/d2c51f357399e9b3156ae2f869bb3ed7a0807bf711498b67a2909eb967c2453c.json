{"ast":null,"code":"/**\r\n * 字符串工具函数\r\n */\n\n/**\r\n * 将驼峰命名法转换为蛇形命名法\r\n * 例如：chainType -> chain_type\r\n */\nexport function camelToSnakeCase(str) {\n  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n}\n\n/**\r\n * 将对象的键从驼峰命名法转换为蛇形命名法\r\n * 递归处理嵌套对象\r\n */\nexport function convertKeysToSnakeCase(obj) {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => convertKeysToSnakeCase(item));\n  }\n  const result = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const snakeKey = camelToSnakeCase(key);\n      const value = obj[key];\n\n      // 特殊处理链类型\n      if (key === 'chainType' && typeof value === 'string') {\n        result[snakeKey] = value.toLowerCase();\n      } else {\n        result[snakeKey] = convertKeysToSnakeCase(value);\n      }\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["camelToSnakeCase","str","replace","letter","toLowerCase","convertKeysToSnakeCase","obj","Array","isArray","map","item","result","key","Object","prototype","hasOwnProperty","call","snakeKey","value"],"sources":["D:/Desktop/code/multi-chain-wallet/frontend/src/utils/stringUtils.ts"],"sourcesContent":["/**\r\n * 字符串工具函数\r\n */\r\n\r\n/**\r\n * 将驼峰命名法转换为蛇形命名法\r\n * 例如：chainType -> chain_type\r\n */\r\nexport function camelToSnakeCase(str: string): string {\r\n  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\r\n}\r\n\r\n/**\r\n * 将对象的键从驼峰命名法转换为蛇形命名法\r\n * 递归处理嵌套对象\r\n */\r\nexport function convertKeysToSnakeCase(obj: any): any {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  if (Array.isArray(obj)) {\r\n    return obj.map(item => convertKeysToSnakeCase(item));\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n  \r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      const snakeKey = camelToSnakeCase(key);\r\n      const value = obj[key];\r\n      \r\n      // 特殊处理链类型\r\n      if (key === 'chainType' && typeof value === 'string') {\r\n        result[snakeKey] = value.toLowerCase();\r\n      } else {\r\n        result[snakeKey] = convertKeysToSnakeCase(value);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return result;\r\n} "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAgBA,CAACC,GAAW,EAAU;EACpD,OAAOA,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAEC,MAAM,IAAI,IAAIA,MAAM,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;AACpE;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,GAAQ,EAAO;EACpD,IAAIA,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3C,OAAOA,GAAG;EACZ;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IACtB,OAAOA,GAAG,CAACG,GAAG,CAACC,IAAI,IAAIL,sBAAsB,CAACK,IAAI,CAAC,CAAC;EACtD;EAEA,MAAMC,MAA2B,GAAG,CAAC,CAAC;EAEtC,KAAK,MAAMC,GAAG,IAAIN,GAAG,EAAE;IACrB,IAAIO,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACV,GAAG,EAAEM,GAAG,CAAC,EAAE;MAClD,MAAMK,QAAQ,GAAGjB,gBAAgB,CAACY,GAAG,CAAC;MACtC,MAAMM,KAAK,GAAGZ,GAAG,CAACM,GAAG,CAAC;;MAEtB;MACA,IAAIA,GAAG,KAAK,WAAW,IAAI,OAAOM,KAAK,KAAK,QAAQ,EAAE;QACpDP,MAAM,CAACM,QAAQ,CAAC,GAAGC,KAAK,CAACd,WAAW,CAAC,CAAC;MACxC,CAAC,MAAM;QACLO,MAAM,CAACM,QAAQ,CAAC,GAAGZ,sBAAsB,CAACa,KAAK,CAAC;MAClD;IACF;EACF;EAEA,OAAOP,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}