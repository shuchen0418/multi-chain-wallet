{"ast":null,"code":"import axios from 'axios';\n// 创建API实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || '/api/v1',\n  timeout: 10000\n});\n\n// 添加响应拦截器\napi.interceptors.response.use(response => {\n  // 如果响应成功，返回response.data.data\n  return response.data.data;\n}, error => {\n  var _error$response, _error$response2, _error$response2$data;\n  // 如果响应失败，返回一个被拒绝的Promise\n  console.error('API请求错误:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n});\n\n// 跨链转账请求接口\n\n// 跨链转账响应接口\n\n// 跨链历史记录项接口\n\n/**\r\n * 执行跨链转账\r\n * @param params 转账参数\r\n * @returns 转账响应\r\n */\nconst transfer = async params => {\n  console.log('发起跨链转账请求:', params);\n  const response = await api.post('/bridge/transfer', params);\n  console.log('跨链转账响应:', response);\n  return response;\n};\n\n/**\r\n * 获取交易状态\r\n * @param hash 交易哈希\r\n * @returns 交易状态\r\n */\nconst getStatus = async hash => {\n  return await api.get(`/bridge/status/${hash}`);\n};\n\n/**\r\n * 获取地址的跨链交易历史\r\n * @param address 钱包地址\r\n * @returns 交易历史列表\r\n */\nconst getHistory = async address => {\n  console.log('获取地址的跨链交易历史:', address);\n  return await api.get(`/bridge/history?address=${address}`);\n};\n\n// 导出API函数\nexport default {\n  transfer,\n  getStatus,\n  getHistory\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","interceptors","response","use","data","error","_error$response","_error$response2","_error$response2$data","console","message","Promise","reject","transfer","params","log","post","getStatus","hash","get","getHistory","address"],"sources":["D:/Desktop/code/multi-chain-wallet/frontend/src/api/bridgeApi.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ChainType } from '../types';\r\n\r\n// 创建API实例\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL || '/api/v1',\r\n  timeout: 10000,\r\n});\r\n\r\n// 添加响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    // 如果响应成功，返回response.data.data\r\n    return response.data.data;\r\n  },\r\n  (error) => {\r\n    // 如果响应失败，返回一个被拒绝的Promise\r\n    console.error('API请求错误:', error.response?.data || error.message);\r\n    return Promise.reject(error.response?.data?.message || error.message);\r\n  }\r\n);\r\n\r\n// 跨链转账请求接口\r\nexport interface BridgeTransferRequest {\r\n  fromChainType: ChainType;\r\n  toChainType: ChainType;\r\n  fromAddress: string;\r\n  toAddress: string;\r\n  amount: string;\r\n  tokenAddress?: string;\r\n  isTokenTransfer?: boolean;\r\n}\r\n\r\n// 跨链转账响应接口\r\nexport interface BridgeTransferResponse {\r\n  txHash: string;\r\n  status: string;\r\n  fromChain: string;\r\n  toChain: string;\r\n  fromAddress: string;\r\n  toAddress: string;\r\n  amount: string;\r\n  createTime: number;\r\n}\r\n\r\n// 跨链历史记录项接口\r\nexport interface BridgeHistoryItem {\r\n  txHash: string;\r\n  status: string;\r\n  fromChain: string;\r\n  toChain: string;\r\n  fromAddress: string;\r\n  toAddress: string;\r\n  amount: string;\r\n  createTime: number;\r\n}\r\n\r\n/**\r\n * 执行跨链转账\r\n * @param params 转账参数\r\n * @returns 转账响应\r\n */\r\nconst transfer = async (params: BridgeTransferRequest): Promise<BridgeTransferResponse> => {\r\n  console.log('发起跨链转账请求:', params);\r\n  const response = await api.post<any, BridgeTransferResponse>('/bridge/transfer', params);\r\n  console.log('跨链转账响应:', response);\r\n  return response;\r\n};\r\n\r\n/**\r\n * 获取交易状态\r\n * @param hash 交易哈希\r\n * @returns 交易状态\r\n */\r\nconst getStatus = async (hash: string): Promise<BridgeTransferResponse> => {\r\n  return await api.get<any, BridgeTransferResponse>(`/bridge/status/${hash}`);\r\n};\r\n\r\n/**\r\n * 获取地址的跨链交易历史\r\n * @param address 钱包地址\r\n * @returns 交易历史列表\r\n */\r\nconst getHistory = async (address: string): Promise<BridgeHistoryItem[]> => {\r\n  console.log('获取地址的跨链交易历史:', address);\r\n  return await api.get<any, BridgeHistoryItem[]>(`/bridge/history?address=${address}`);\r\n};\r\n\r\n// 导出API函数\r\nexport default {\r\n  transfer,\r\n  getStatus,\r\n  getHistory,\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,SAAS;EACxDC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ,CAACE,IAAI,CAACA,IAAI;AAC3B,CAAC,EACAC,KAAK,IAAK;EAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,qBAAA;EACT;EACAC,OAAO,CAACJ,KAAK,CAAC,UAAU,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACK,OAAO,CAAC;EAChE,OAAOC,OAAO,CAACC,MAAM,CAAC,EAAAL,gBAAA,GAAAF,KAAK,CAACH,QAAQ,cAAAK,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBH,IAAI,cAAAI,qBAAA,uBAApBA,qBAAA,CAAsBE,OAAO,KAAIL,KAAK,CAACK,OAAO,CAAC;AACvE,CACF,CAAC;;AAED;;AAWA;;AAYA;;AAYA;AACA;AACA;AACA;AACA;AACA,MAAMG,QAAQ,GAAG,MAAOC,MAA6B,IAAsC;EACzFL,OAAO,CAACM,GAAG,CAAC,WAAW,EAAED,MAAM,CAAC;EAChC,MAAMZ,QAAQ,GAAG,MAAMR,GAAG,CAACsB,IAAI,CAA8B,kBAAkB,EAAEF,MAAM,CAAC;EACxFL,OAAO,CAACM,GAAG,CAAC,SAAS,EAAEb,QAAQ,CAAC;EAChC,OAAOA,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMe,SAAS,GAAG,MAAOC,IAAY,IAAsC;EACzE,OAAO,MAAMxB,GAAG,CAACyB,GAAG,CAA8B,kBAAkBD,IAAI,EAAE,CAAC;AAC7E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAME,UAAU,GAAG,MAAOC,OAAe,IAAmC;EAC1EZ,OAAO,CAACM,GAAG,CAAC,cAAc,EAAEM,OAAO,CAAC;EACpC,OAAO,MAAM3B,GAAG,CAACyB,GAAG,CAA2B,2BAA2BE,OAAO,EAAE,CAAC;AACtF,CAAC;;AAED;AACA,eAAe;EACbR,QAAQ;EACRI,SAAS;EACTG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}